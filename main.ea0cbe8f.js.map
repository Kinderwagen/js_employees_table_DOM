{"version":3,"sources":["scripts/main.js"],"names":["document","addEventListener","tableHead","employeeForm","querySelector","tableBody","sortAscending","officeList","addNewEmployeeForm","createElement","action","method","classList","add","innerHTML","body","append","updateEditedCell","cell","cellColumnName","previousVal","currentVal","firstElementChild","value","input","validateInput","showNotification","toLocaleString","textContent","type","title","notification","messagesText","messages","name","age","length","valid","setAttribute","setTimeout","remove","inName","inVal","trim","findTableColumnName","tableHeader","tableHeadArray","children","map","item","convertStrToInt","str","out","parseInt","replace","e","selectedName","table","sortIndex","sortedData","selectedColName","target","closest","indexOf","sort","row1","row2","dataTypeOfSort","row1DataToSort","row2DataToSort","sortResult","localeCompare","forEach","row","currentSelectedRow","previousSelectedRow","toggle","editableCell","editableCellInput","previousValue","editableCellNumber","editableColumnName","toLowerCase","focus","key","preventDefault","addedEmployee","employee","tableColumnNames","FormData","newEmployee","Object","fromEntries","entries","validateForm","form","inputName","inputValue","result","cellData","reset"],"mappings":"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","file":"main.ea0cbe8f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const tableHead = document.querySelector('thead');\n  const tableBody = document.querySelector('tbody');\n  let sortAscending = true;\n  const officeList = `\n  <select data-qa=\"office\" name=\"office\">\n    <option selected disabled></option>\n    <option value=\"Tokyo\">\n      Tokyo\n    </option>\n    <option value=\"Singapore\">\n      Singapore\n    </option>\n    <option value=\"London\">\n      London\n    </option>\n    <option value=\"New York\">\n      New York\n    </option>\n    <option value=\"Edinburgh\">\n      Edinburgh\n    </option>\n    <option value=\"San Francisco\">\n      San Francisco\n    </option>\n  </select>\n  `;\n  const addNewEmployeeForm = createNewEmployeeForm();\n\n  tableHead.addEventListener('click', (e) => {\n    const selectedName = e.target.closest('th').textContent;\n\n    if (selectedName) {\n      sortTable(tableBody, selectedName);\n    }\n  });\n\n  tableBody.addEventListener('click', (e) => {\n    const currentSelectedRow = e.target.closest('tr');\n    const previousSelectedRow = tableBody.querySelector('tr.active');\n\n    if (previousSelectedRow && previousSelectedRow !== currentSelectedRow) {\n      previousSelectedRow.classList.remove('active');\n    }\n\n    if (currentSelectedRow) {\n      currentSelectedRow.classList.toggle('active');\n    }\n  });\n\n  tableBody.addEventListener('dblclick', (e) => {\n    const editableCell = e.target.closest('td');\n    const editableRow = editableCell.closest('tr');\n    const editableCellNumber = [...editableRow.children].indexOf(editableCell);\n\n    const editableColumnName\n      = findTableColumnName(tableHead)[editableCellNumber].toLowerCase();\n\n    let editableCellInput;\n    const previousVal = editableCell.textContent;\n\n    switch (true) {\n      case editableColumnName === 'salary':\n        editableCellInput = '<input class=\"cell-input\" type=\"number\">';\n        break;\n\n      case editableColumnName === 'age':\n        editableCellInput = '<input class=\"cell-input\" type=\"number\">';\n        break;\n\n      case editableColumnName === 'office':\n        editableCellInput = officeList;\n        break;\n\n      default:\n        editableCellInput = '<input class=\"cell-input\" type=\"text\">';\n    }\n\n    editableCell.innerHTML = editableCellInput;\n\n    editableCell.firstElementChild.focus();\n    addEditedCellInputEvents(editableCell, editableColumnName, previousVal);\n  });\n\n  addNewEmployeeForm.addEventListener('submit', e => {\n    e.preventDefault();\n\n    const addedEmployee = new FormData(e.target);\n    const newEmployee = Object.fromEntries(addedEmployee.entries());\n\n    const { result, inputName } = validateForm(newEmployee);\n\n    if (!result) {\n      showNotification('error', inputName);\n\n      return;\n    };\n\n    addNewEmployee(newEmployee);\n    e.target.reset();\n    showNotification('success', '');\n  });\n\n  function addEditedCellInputEvents(cell, cellColumnName, previousValue) {\n    cell.firstElementChild.addEventListener('keyup', e => {\n      if (e.key === 'Enter') {\n        updateEditedCell(cell, cellColumnName, previousValue);\n      }\n    });\n\n    cell.firstElementChild.addEventListener('blur', e => {\n      updateEditedCell(cell, cellColumnName, previousValue);\n    });\n  }\n\n  function updateEditedCell(cell, cellColumnName, previousVal) {\n    const currentVal = cell.firstElementChild.value;\n    let input = '';\n\n    if (!validateInput(cellColumnName, currentVal)) {\n      showNotification('error', cellColumnName);\n      input = previousVal;\n    }\n\n    if (cellColumnName === 'salary') {\n      input = `$${+currentVal.toLocaleString('en')}`;\n    }\n\n    input = input || currentVal;\n\n    cell.textContent = input;\n  }\n\n  function showNotification(type, title) {\n    const notification = document.createElement('div');\n    const messages = {\n      name: 'Name should be equal or greater than 4 letters',\n      age: 'Age should be equal or greater than 18 and lower than 90',\n      length: 'Field should not be empty',\n      valid: 'Everything is ok',\n    };\n\n    let messagesText;\n\n    if (type === 'success') {\n      messagesText = messages.valid;\n    } else {\n      messagesText = messages[title]\n        ? messages[title]\n        : messages.length;\n    }\n\n    notification.classList.add('notification');\n    notification.classList.add(type);\n    notification.setAttribute('data-qa', 'notification');\n\n    notification.innerHTML = `\n      <h2 class=\"title\">\n        ${type === 'success' ? 'Success' : title + ' Error'}\n      </h2>\n      <p>${messagesText}</p>\n    `;\n\n    document.body.append(notification);\n\n    setTimeout(() => {\n      hideNotification(notification);\n    }, 5000);\n  }\n\n  function hideNotification(availableNotification) {\n    availableNotification.remove();\n  }\n\n  function createNewEmployeeForm() {\n    const employeeForm = document.createElement('form');\n\n    employeeForm.action = '#';\n    employeeForm.method = 'POST';\n    employeeForm.classList.add('new-employee-form');\n\n    employeeForm.innerHTML = `\n      <label>Name:\n        <input\n          data-qa=\"name\"\n          name=\"name\"\n          type=\"text\"\n        >\n      </label>\n      <label>Position:\n        <input\n          data-qa=\"position\"\n          name=\"position\"\n          type=\"text\"\n        >\n      </label>\n      <label>Office:\n        ${officeList}\n      </label>\n      <label>Age:\n        <input data-qa=\"age\" name=\"age\" type=\"number\">\n      </label>\n      <label>Salary:\n        <input data-qa=\"salary\" name=\"salary\" type=\"number\">\n      </label>\n      <button type=\"submit\">Save to table</button>\n    `;\n\n    document.body.append(employeeForm);\n\n    return employeeForm;\n  }\n\n  function addNewEmployee(employee) {\n    const tableColumnNames = findTableColumnName(tableHead);\n    const row = document.createElement('tr');\n\n    tableColumnNames.forEach(item => {\n      const cell = document.createElement('td');\n\n      let cellData;\n\n      switch (true) {\n        case item.toLowerCase() === 'salary':\n          cellData = `\n            $${(+employee[item.toLowerCase()]).toLocaleString('en')}\n          `;\n          break;\n        default:\n          cellData = `${employee[item.toLowerCase()]}`;\n      }\n\n      cell.innerHTML = cellData;\n      row.append(cell);\n    });\n\n    tableBody.append(row);\n  }\n\n  function validateForm(form) {\n    for (const [inputName, inputValue] of Object.entries(form)) {\n      if (!validateInput(inputName, inputValue)) {\n        return {\n          result: false,\n          inputName: inputName,\n        };\n      }\n    }\n\n    return { result: true };\n  }\n\n  function validateInput(inName, inVal) {\n    if (inName === 'name' && inVal.trim().length < 4) {\n      return false;\n    }\n\n    if (inName === 'age') {\n      const age = +inVal.trim();\n\n      return !(age < 18 || age > 90);\n    }\n\n    if (inVal.trim().length === 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function findTableColumnName(tableHeader) {\n    const tableHeadElements = tableHeader.firstElementChild.children;\n\n    const tableHeadArray = [...tableHeadElements].map(item => item.textContent);\n\n    return tableHeadArray;\n  }\n\n  function findTableColumnNumberFromName(selectedColName) {\n    const tableColumnNames = findTableColumnName(tableHead);\n\n    return tableColumnNames.indexOf(selectedColName);\n  }\n\n  function sortTable(table, condition) {\n    const sortIndex = findTableColumnNumberFromName(condition);\n    const rowsData = table.children;\n\n    const sortedData = [...rowsData].sort((row1, row2) => {\n      const dataTypeOfSort\n        = convertStrToInt(row1.children[sortIndex].textContent)\n          ? 'number'\n          : 'string';\n\n      let row1DataToSort;\n      let row2DataToSort;\n      let sortResult;\n\n      if (dataTypeOfSort === 'number') {\n        row1DataToSort = convertStrToInt(row1.children[sortIndex].textContent);\n        row2DataToSort = convertStrToInt(row2.children[sortIndex].textContent);\n\n        sortResult = sortAscending\n          ? row1DataToSort - row2DataToSort\n          : row2DataToSort - row1DataToSort;\n      } else {\n        row1DataToSort = row1.children[sortIndex].textContent;\n        row2DataToSort = row2.children[sortIndex].textContent;\n\n        sortResult = sortAscending\n          ? row1DataToSort.localeCompare(row2DataToSort)\n          : row2DataToSort.localeCompare(row1DataToSort);\n      }\n\n      return sortResult;\n    });\n\n    sortAscending = !sortAscending;\n\n    tableBody.innerHTML = '';\n\n    sortedData.forEach(row => {\n      tableBody.append(row);\n    });\n  }\n\n  function convertStrToInt(str) {\n    const reg = /\\D/g;\n\n    const out = parseInt(str.replace(reg, ''));\n\n    return out;\n  }\n});\n"]}